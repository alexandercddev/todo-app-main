{"version":3,"sources":["reducers/toDoReducer.js","components/ToDoAdd.js","components/ToDoFilters.js","components/ToDoListItem.js","components/ToDoList.js","components/ToDoApp.js","App.js","reportWebVitals.js","index.js"],"names":["toDoReducer","state","action","type","payload","filter","item","id","map","done","checked","view","init","description","ToDoAdd","handleAdd","useState","form","setForm","handleChange","target","value","name","data","current","className","onSubmit","e","preventDefault","onChange","placeholder","autoComplete","all","active","completed","ToDoFilters","handleAll","handleActive","handleCompleted","actives","setActives","onClick","ToDoListItem","handleDelete","handleToggle","handleChecked","ToDoList","todos","count","reduce","prev","curr","length","todo","index","JSON","parse","localStorage","getItem","ToDoApp","useReducer","dispath","mode","setMode","useEffect","setItem","stringify","console","log","newTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0822c0cf.chunk.js","sourcesContent":["\r\nlet init = [];\r\nconst toDoReducer = ( state = [], action) => {\r\n    switch (action?.type) {\r\n        case 'add': \r\n            return [ ...state, action.payload]; \r\n        case 'delete': \r\n            return state.filter( item => item.id !== action.payload);\r\n        case 'toggle':\r\n            return state.map( item => (\r\n                ( item.id === action.payload )\r\n                ? {...item, done: !item.done}\r\n                : item\r\n            ));\r\n        case 'checked':\r\n            return state.map( item => (\r\n                ( item.id === action.payload )\r\n                ? {...item, checked: !item.checked}\r\n                : item\r\n            ));\r\n        case 'filter-all': \r\n            return state.map( item => (\r\n                {...item, view: true}\r\n            ));\r\n        case 'filter-checked': \r\n            return state.map( item => (\r\n                {...item, view: item.checked}\r\n            ));\r\n        case 'filter-done': \r\n            return state.map( item => (\r\n                {...item, view: item.done}\r\n            ));\r\n        case 'clear': \r\n            return state.filter( item => !item.done);\r\n        default:\r\n            return  state;\r\n    }\r\n}\r\n\r\nexport {\r\n    toDoReducer\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nconst init = { \r\n    description: '', \r\n    checked: false\r\n}\r\nconst ToDoAdd = ({ handleAdd }) => {\r\n    const [ form, setForm ] = useState(init);\r\n    const { description, checked } = form;\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleAdd({\r\n            description,\r\n            checked,\r\n            done: false,\r\n            view: true\r\n        });\r\n        setForm(init)\r\n    }\r\n    const handleChange = ({ target }) => {\r\n        const { type, value, name, checked } = target; \r\n        const data = type === 'checkbox' ? checked : value;\r\n        setForm((current) => ({\r\n            ...current,\r\n            [name]: data\r\n        }))\r\n    }\r\n    return ( \r\n        <form className='form' onSubmit={handleSubmit}>\r\n            <label className=\"container-checkbox\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name='checked'\r\n                    className='checkbox' \r\n                    checked={checked}\r\n                    onChange={handleChange}/>\r\n                <span className=\"checkmark\"></span>\r\n            </label> \r\n            <input \r\n                type='text' \r\n                placeholder='Create a new todo...' \r\n                name=\"description\"\r\n                className=\"form-control\" \r\n                autoComplete=\"off\" \r\n                value={description}\r\n                onChange={handleChange}\r\n            ></input>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ToDoAdd;","import React, { useState } from 'react';\r\n\r\nconst init = {\r\n    all: 'active',\r\n    active: '',\r\n    completed: ''\r\n}\r\nconst ToDoFilters = ({ className, handleAll, handleActive, handleCompleted}) => {\r\n    const [ actives, setActives] = useState(init);\r\n    const { all, active, completed } = actives;\r\n    return (  \r\n        <div className={`footer-center ${className}`}>\r\n            <button \r\n                className={`action ${all}`}\r\n                onClick={() => {\r\n                    handleAll();\r\n                    setActives({\r\n                        all: 'active',\r\n                        active: '',\r\n                        completed: ''\r\n                    });\r\n                }}\r\n            >All</button>\r\n            <button \r\n                className={`action ${active}`}\r\n                onClick={() => {\r\n                    handleActive();\r\n                    setActives({\r\n                        all: '',\r\n                        active: 'active',\r\n                        completed: ''\r\n                    });\r\n                }}\r\n            >Active</button>\r\n            <button \r\n                className={`action ${completed}`}\r\n                onClick={() => {\r\n                    handleCompleted();\r\n                    setActives({\r\n                        all: '',\r\n                        active: '',\r\n                        completed: 'active'\r\n                    });\r\n                }}\r\n            >Completed</button> \r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default ToDoFilters;","import React from 'react';\r\n\r\nconst ToDoListItem = ({ id, description, done, checked, handleDelete, handleToggle, handleChecked}) => {\r\n    return ( \r\n        <>\r\n            <li className='li-todo'>\r\n                <label className=\"container-checkbox\">\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        className='checkbox' \r\n                        checked={checked}\r\n                        onChange={() => {handleChecked(id)}}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label> \r\n                <span \r\n                    className={`description ${done && 'complete'}`}\r\n                    onClick={()=> {handleToggle(id)}}\r\n                >{description}</span>\r\n                <button \r\n                    className='btn btn-close'\r\n                    onClick={() => {handleDelete(id)}}\r\n                ></button>\r\n            </li>\r\n            <div className='separator'></div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ToDoListItem;","import React from 'react';\r\nimport ToDoListItem from './ToDoListItem';\r\n\r\nconst ToDoList = ({ todos, handleDelete, handleToggle, handleChecked}) => {\r\n    const count = todos.reduce((prev, curr) => {\r\n        return curr.view ? prev + 1 : prev;\r\n    }, 0);\r\n    return ( \r\n        <ul className='ul-todos'>\r\n            {todos.length === 0 || count === 0\r\n                ? (<div className='li-todo'>\r\n                    <span className={`description`}>Not records</span>\r\n                </div>) \r\n                : todos.map((todo, index) => {\r\n                    return todo.view && (<ToDoListItem \r\n                        key={`todo-${index}`}\r\n                        {...todo}\r\n                        handleDelete={handleDelete}\r\n                        handleToggle={handleToggle}\r\n                        handleChecked={handleChecked}\r\n                    ></ToDoListItem>);\r\n                })\r\n            } \r\n        </ul> \r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, { useEffect, useReducer, useState } from 'react';\r\nimport { toDoReducer } from '../reducers/toDoReducer';\r\nimport ToDoAdd from './ToDoAdd';\r\nimport ToDoFilters from './ToDoFilters';\r\nimport ToDoList from './ToDoList';\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('todos')) || [\r\n        {\r\n            id: 1,\r\n            description: 'Learn HTML',\r\n            done: true,\r\n            checked: false,\r\n            view: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            description: 'Learn CSS',\r\n            done: false,\r\n            checked: true,\r\n            view: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            description: 'Learn JavaScript',\r\n            done: false,\r\n            checked: false,\r\n            view: true,\r\n        },\r\n        {\r\n            id: 4,\r\n            description: 'Learn React',\r\n            done: true,\r\n            checked: false,\r\n            view: true,\r\n        },\r\n        {\r\n            id: 5,\r\n            description: 'Learn NextJS',\r\n            done: true,\r\n            checked: true,\r\n            view: true,\r\n        }\r\n    ];\r\n};\r\n\r\nconst ToDoApp = () => {\r\n    const [ todos, dispath ] = useReducer(toDoReducer, [], init); \r\n    const [ mode, setMode] = useState('moon'); \r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos)); \r\n        console.log(todos)\r\n        console.log('Me renderice de nuevo me dio ansiedad')\r\n    }, [todos]);\r\n    const handleMode = () => setMode(mode === 'moon' ? 'sun' : 'moon');\r\n    const handleAdd = (newTodo) => {\r\n        dispath({\r\n            type: 'add',\r\n            payload: {\r\n                ...newTodo,\r\n                id: todos.length + 1\r\n            }\r\n        });\r\n    }\r\n    const handleChecked = (id) => {\r\n        dispath({\r\n            type: 'checked',\r\n            payload: id\r\n        });\r\n    }\r\n    const handleDelete = (id) => {\r\n        dispath({\r\n            type: 'delete',\r\n            payload: id\r\n        });\r\n    }\r\n    const handleToggle = (id) => {\r\n        dispath({\r\n            type: 'toggle',\r\n            payload: id\r\n        });\r\n    }\r\n    const handleAll = () => { \r\n        dispath({\r\n            type: 'filter-all'\r\n        });\r\n    }\r\n    const handleActive = () => {\r\n        dispath({\r\n            type: 'filter-checked' \r\n        });\r\n    }\r\n    const handleCompleted = () => {\r\n        dispath({\r\n            type: 'filter-done' \r\n        });\r\n    }\r\n    const handleClearCompleted = () => {\r\n        dispath({\r\n            type: 'clear'\r\n        });\r\n    }\r\n    return (\r\n        <div className={`app ${mode}`}> \r\n            <div className={`container ${mode}`}>\r\n                <div className='box box-header'>\r\n                    <h1 className='title'>TODO</h1> \r\n                    <button \r\n                        onClick={handleMode}\r\n                        className={`btn btn-${mode}`}\r\n                    ></button>\r\n                </div>\r\n                <div className={`box box-content ${mode}`}>\r\n                    <ToDoAdd \r\n                        handleAdd={handleAdd}\r\n                    />\r\n                </div>\r\n                <div className={`box box-content ${mode}`}>\r\n                    <ToDoList \r\n                        todos={todos}\r\n                        handleChecked={handleChecked}\r\n                        handleDelete={handleDelete}\r\n                        handleToggle={handleToggle}\r\n                    />\r\n                    <div className='footer-box'>\r\n                        <span>{todos.length} items left</span>\r\n                        <ToDoFilters  \r\n                            className={`desk`}\r\n                            handleAll={handleAll}\r\n                            handleActive={handleActive}\r\n                            handleCompleted={handleCompleted}\r\n                        />\r\n                        <button \r\n                            className='action'\r\n                            onClick={handleClearCompleted}\r\n                        >Clear Completed</button>\r\n                    </div>\r\n                </div>\r\n                <div className={`box box-content ${mode} mobile`}>\r\n                    <div className='footer-box'>\r\n                        <ToDoFilters \r\n                            handleAll={handleAll}\r\n                            handleActive={handleActive}\r\n                            handleCompleted={handleCompleted}\r\n                        />    \r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default ToDoApp;","import './assets/styles/style.scss'; \nimport ToDoApp from './components/ToDoApp';\n\nconst App = () => {\n  return (<ToDoApp></ToDoApp>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}